diff -bruN src/constrain.F ../vasp.5.4.4_mod/src/constrain.F
--- src/constrain.F	1970-01-01 01:00:00.000000000 +0100
+++ ../vasp.5.4.4_mod/src/constrain.F	2020-06-16 19:55:21.398889132 +0100
@@ -0,0 +1,302 @@
+!*********************************************************************
+!
+! subroutine to constrain force
+!
+! Original Author: UNKONW (GaTech)
+! Modified by: Chengcheng-Xiao
+! Email: iconxicon@me.com
+! 2020-06-16 added mass weighted average force.
+! 2020-05-22 adapted to vasp 5.4.4
+! 2020-04-23 add ability to fix multiple bonds
+!*********************************************************************
+
+      SUBROUTINE RD_CONSTRAIN(NCONST,ION1,ION2,DIST12,CONSTRAIN_START)
+      USE lattice
+      USE poscar
+      ! USE base
+      IMPLICIT NONE
+
+      ! TYPE(in_struct) IO
+      INTEGER ION1(99),ION2(99),NCONST
+      LOGICAL CONSTRAIN_START
+      REAL(q)  DIST12(99)
+      ION1=0
+      ION2=0
+      DIST12=0.0
+
+      ! have file?
+      INQUIRE(FILE='CONSTRAIN',EXIST=CONSTRAIN_START)
+
+      IF (CONSTRAIN_START) THEN
+      NCONST=0
+      OPEN(UNIT=777,FILE='CONSTRAIN',STATUS='OLD',ERR=900)
+      DO WHILE (.TRUE.)
+         NCONST=NCONST+1
+         READ(777,*,END=999) ION1(NCONST),ION2(NCONST),DIST12(NCONST)
+         ! IF (IO%IU0>=0) WRITE(IO%IU0,*) "have file", NCONST
+      END DO
+999   CLOSE(UNIT=777)
+      ENDIF
+
+!      OPEN(UNIT=777,FILE='CONSTRAIN',STATUS='OLD',ERR=900)
+!      READ(777,*) ION1,ION2,DIST12
+!      CLOSE(UNIT=777)
+
+!     WRITE(*,*) 'ION1=',ION1,'ION2=',ION2,'d=',DIST12
+
+ 900  CONTINUE
+      END SUBROUTINE
+
+
+
+      SUBROUTINE CONSTRAIN_FORCE(T_INFO,VEL,TIFOR,POS,LATT_CUR,IO)
+      USE lattice
+      USE poscar
+      USE base
+      IMPLICIT NONE
+
+      TYPE (latt)        LATT_CUR
+      TYPE (type_info)   T_INFO
+      TYPE(in_struct) IO
+      REAL(q)  TIFOR(3,T_INFO%NIONS),VEL(3,T_INFO%NIONS)
+      REAL(q)  POS(3,T_INFO%NIONS)
+! local
+      INTEGER ION1(99),ION2(99),NCONST,I,J
+      REAL(q) DIST12(99)
+      REAL(q) DDIST12
+      REAL(q) MASS1, MASS2
+      REAL(q) POS1(3),POS2(3),TANVEC(3),TANC,VTMP(3)
+      REAL(q) TANF1,TANF2,TANAVEF1,TANAVEF2
+      LOGICAL CONSTRAIN_START
+
+      CALL RD_CONSTRAIN(NCONST,ION1,ION2,DIST12,CONSTRAIN_START)
+
+      IF (.NOT. CONSTRAIN_START) THEN
+        GOTO 800
+      ENDIF
+
+      IF (ALL(ION1 .EQ. 0) .OR. ALL(ION2 .EQ. 0) .OR. ALL(DIST12 .EQ. 0._q)) THEN
+        IF (IO%IU0>=0) WRITE(IO%IU0,'(A,/,A)') ' ------------------------------- ', &
+                                              &'|** Failed to read CONSTRAIN. **|',&
+                                              &' ------------------------------- '
+        GOTO 800
+      ENDIF
+
+      ! loop over all constrains
+      DO I=1,NCONST-1
+          ! get atomic postion in Cart coord.
+          POS1(1)=POS(1,ION1(I))
+          POS1(2)=POS(2,ION1(I))
+          POS1(3)=POS(3,ION1(I))
+          CALL DIRKAR(1, POS1, LATT_CUR%A)
+          POS2(1)=POS(1,ION2(I))
+          POS2(2)=POS(2,ION2(I))
+          POS2(3)=POS(3,ION2(I))
+          CALL DIRKAR(1, POS2, LATT_CUR%A)
+
+          ! get atomic mass
+          MASS1=T_INFO%POMASS(T_INFO%ITYP(ION1(I)))
+          MASS2=T_INFO%POMASS(T_INFO%ITYP(ION2(I)))
+          ! IF (IO%IU0>=0) WRITE(IO%IU0,*) ' mass1=',MASS1,' mass2=',MASS2, ' NCONT', I
+
+          ! get direction vector -> TANVEC
+          ! get distance         -> DIST12
+          ! get dist difference  -> DDIST12
+          TANVEC(1)=POS2(1)-POS1(1)
+          TANVEC(2)=POS2(2)-POS1(2)
+          TANVEC(3)=POS2(3)-POS1(3)
+          TANC=(TANVEC(1)**2.0+TANVEC(2)**2.0+TANVEC(3)**2.0)**0.5
+          DDIST12=TANC-DIST12(I)
+          TANVEC(1)=TANVEC(1)/TANC
+          TANVEC(2)=TANVEC(2)/TANC
+          TANVEC(3)=TANVEC(3)/TANC
+
+          ! project force on each atom to direction vector
+          ! FORCE * TANVEC
+          TANF1=TIFOR(1,ION1(I))*TANVEC(1)
+          TANF1=TANF1+TIFOR(2,ION1(I))*TANVEC(2)
+          TANF1=TANF1+TIFOR(3,ION1(I))*TANVEC(3)
+          TANF2=TIFOR(1,ION2(I))*TANVEC(1)
+          TANF2=TANF2+TIFOR(2,ION2(I))*TANVEC(2)
+          TANF2=TANF2+TIFOR(3,ION2(I))*TANVEC(3)
+
+          ! get average force on direction vector
+          TANAVEF1=(TANF1+TANF2)*(MASS1/(MASS1+MASS2))
+          TANAVEF2=(TANF1+TANF2)*(MASS2/(MASS1+MASS2))
+
+          ! subtract average force on direction vector from atomic force
+          ! forces on atom are now orthorgonal to direction vec
+          TIFOR(1,ION1(I))=TIFOR(1,ION1(I))-TANF1*TANVEC(1)
+          TIFOR(2,ION1(I))=TIFOR(2,ION1(I))-TANF1*TANVEC(2)
+          TIFOR(3,ION1(I))=TIFOR(3,ION1(I))-TANF1*TANVEC(3)
+          TIFOR(1,ION2(I))=TIFOR(1,ION2(I))-TANF2*TANVEC(1)
+          TIFOR(2,ION2(I))=TIFOR(2,ION2(I))-TANF2*TANVEC(2)
+          TIFOR(3,ION2(I))=TIFOR(3,ION2(I))-TANF2*TANVEC(3)
+
+          ! add back average force along direction vec so that they are equal on each atom.
+          ! this makes atoms become rigid body.
+          IF ((T_INFO%LSFOR(1,ION1(I))).AND.(T_INFO%LSFOR(1,ION2(I)))) THEN
+             TIFOR(1,ION1(I))=TIFOR(1,ION1(I))+TANAVEF1*TANVEC(1)
+             TIFOR(1,ION2(I))=TIFOR(1,ION2(I))+TANAVEF2*TANVEC(1)
+!	     IF (IO%IU6>=0) WRITE(IO%IU6,'(X,A,F9.6,A,F9.6)') 'Force on Cart. X, Atom1:', TIFOR(1,ION1(I)), ' Atom2: ', TIFOR(1,ION2(I))
+          ENDIF
+          IF ((T_INFO%LSFOR(2,ION1(I))).AND.(T_INFO%LSFOR(2,ION2(I)))) THEN
+             TIFOR(2,ION1(I))=TIFOR(2,ION1(I))+TANAVEF1*TANVEC(2)
+             TIFOR(2,ION2(I))=TIFOR(2,ION2(I))+TANAVEF2*TANVEC(2)
+!	     IF (IO%IU6>=0) WRITE(IO%IU6,'(X,A,F9.6,A,F9.6)') 'Force on Cart. Y, Atom1:',TIFOR(2,ION1(I)),' Atom2: ', TIFOR(2,ION2(I))
+          ENDIF
+          IF ((T_INFO%LSFOR(3,ION1(I))).AND.(T_INFO%LSFOR(3,ION2(I)))) THEN
+             TIFOR(3,ION1(I))=TIFOR(3,ION1(I))+TANAVEF1*TANVEC(3)
+             TIFOR(3,ION2(I))=TIFOR(3,ION2(I))+TANAVEF2*TANVEC(3)
+!	     IF (IO%IU0>=0) WRITE(IO%IU0,'(X,A,F9.6,A,F9.6)') 'Force on Cart. Z, Atom1:',TIFOR(3,ION1(I)),' Atom2: ', TIFOR(3,ION2(I))
+          ENDIF
+
+          VEL(1,ION1(I))=0._q
+          VEL(2,ION1(I))=0._q
+          VEL(3,ION1(I))=0._q
+          VEL(1,ION2(I))=0._q
+          VEL(2,ION2(I))=0._q
+          VEL(3,ION2(I))=0._q
+      END DO
+      IF (IO%IU0>=0) WRITE(IO%IU0,'(X,A)') 'CONSTRAIN_FORCE is done.'
+!      WRITE(*,*) 'CONSTRAIN_FORCE is done.'
+
+      ! 2020-04-24 write constrained force
+      wrtforce: IF (IO%IU6>=0 .AND. IO%NWRITE>=1) THEN
+      WRITE(IO%IU6,972)
+      DO J=1,T_INFO%NIONS
+        VTMP=T_INFO%POSION(1:3,J)
+        CALL  DIRKAR(1,VTMP,LATT_CUR%A)
+        WRITE(IO%IU6,976) VTMP,(TIFOR (I,J),I=1,3)
+      ENDDO
+
+      IF (IO%INTERACTIVE) THEN
+         WRITE(IO%IU0,'(A)') 'FORCES:'
+         DO J=1,T_INFO%NIONS
+            WRITE(IO%IU0,'(3F14.7)') (TIFOR (I,J),I=1,3)
+         ENDDO
+      ENDIF
+      WRITE(IO%IU6,977)
+
+      972     FORMAT( ' POSITION    ',35X,'CONSTRAINED TOTAL-FORCE (eV/Angst)'/ &
+      &          ' ----------------------------------------------', &
+      &          '-------------------------------------')
+      976     FORMAT((3F13.5,3X,3F14.6))
+      977     FORMAT(' ----------------------------------------------', &
+      &          '-------------------------------------')
+      ENDIF wrtforce
+
+
+ 800  CONTINUE
+      END SUBROUTINE
+
+      SUBROUTINE CONSTRAIN_POSITION(T_INFO,POS,LATT_CUR,IO)
+      USE lattice
+      USE poscar
+      USE base
+      IMPLICIT NONE
+
+      TYPE (latt)        LATT_CUR
+      TYPE (type_info)   T_INFO
+      TYPE(in_struct) IO
+      REAL(q)  POS(3,T_INFO%NIONS)
+! local
+      INTEGER ION1(99),ION2(99),NCONST,I
+      REAL(q)  DIST12(99)
+      REAL(q) DDIST12
+      REAL(q) POS1(3),POS2(3),TANVEC(3),TANC
+      LOGICAL CONSTRAIN_START
+      ! REAL(q) TANF1,TANF2,TANAVEF(3)
+
+      CALL RD_CONSTRAIN(NCONST,ION1,ION2,DIST12,CONSTRAIN_START)
+
+      IF (.NOT. CONSTRAIN_START) THEN
+        GOTO 700
+      ENDIF
+
+      IF (ALL(ION1 .EQ. 0) .OR. ALL(ION2 .EQ. 0) .OR. ALL(DIST12 .EQ. 0._q)) THEN
+        IF (IO%IU0>=0) WRITE(IO%IU0,'(A,/,A)') ' ------------------------------- ', &
+                                              &'|** Failed to read CONSTRAIN. **|',&
+                                              &' ------------------------------- '
+        GOTO 700
+      ENDIF
+
+      ! loop over all constrains
+      DO I=1,NCONST-1
+          ! get atomic postion in Cart coord.
+          POS1(1)=POS(1,ION1(I))
+          POS1(2)=POS(2,ION1(I))
+          POS1(3)=POS(3,ION1(I))
+          CALL DIRKAR(1, POS1, LATT_CUR%A)
+          POS2(1)=POS(1,ION2(I))
+          POS2(2)=POS(2,ION2(I))
+          POS2(3)=POS(3,ION2(I))
+          CALL DIRKAR(1, POS2, LATT_CUR%A)
+
+          ! get direction vector -> TANVEC
+          ! get distance         -> DIST12
+          ! get dist difference  -> DDIST12
+          TANVEC(1)=POS2(1)-POS1(1)
+          TANVEC(2)=POS2(2)-POS1(2)
+          TANVEC(3)=POS2(3)-POS1(3)
+          TANC=(TANVEC(1)**2.0+TANVEC(2)**2.0+TANVEC(3)**2.0)**0.5
+          DDIST12=TANC-DIST12(I)
+          TANVEC(1)=TANVEC(1)/TANC
+          TANVEC(2)=TANVEC(2)/TANC
+          TANVEC(3)=TANVEC(3)/TANC
+
+          ! if atoms are allowed to move, then make them equally devided along direction vector
+          ! |pos_a - pos_center| = |pos_b - pos_center| = 0.5*DIST12 along direction_vec
+          IF ((T_INFO%LSFOR(1,ION1(I))).AND.(T_INFO%LSFOR(1,ION2(I)))) THEN
+             POS1(1)=POS1(1)+0.5*DDIST12*TANVEC(1)
+             POS2(1)=POS2(1)-0.5*DDIST12*TANVEC(1)
+          ENDIF
+          IF ((T_INFO%LSFOR(2,ION1(I))).AND.(T_INFO%LSFOR(2,ION2(I)))) THEN
+             POS1(2)=POS1(2)+0.5*DDIST12*TANVEC(2)
+             POS2(2)=POS2(2)-0.5*DDIST12*TANVEC(2)
+          ENDIF
+          IF ((T_INFO%LSFOR(3,ION1(I))).AND.(T_INFO%LSFOR(3,ION2(I)))) THEN
+             POS1(3)=POS1(3)+0.5*DDIST12*TANVEC(3)
+             POS2(3)=POS2(3)-0.5*DDIST12*TANVEC(3)
+          ENDIF
+
+          ! if only one atoms (atom2) is allowed to move, then move that atom along the direction_vec so that
+          ! |pos_a - pos_b| = DIST12 along direction_vec
+          IF ((.NOT.T_INFO%LSFOR(1,ION1(I))).AND.(T_INFO%LSFOR(1,ION2(I)))) THEN
+             POS2(1)=POS2(1)-DDIST12*TANVEC(1)
+          ENDIF
+          IF ((.NOT.T_INFO%LSFOR(2,ION1(I))).AND.(T_INFO%LSFOR(2,ION2(I)))) THEN
+             POS2(2)=POS2(2)-DDIST12*TANVEC(2)
+          ENDIF
+          IF ((.NOT.T_INFO%LSFOR(3,ION1(I))).AND.(T_INFO%LSFOR(3,ION2(I)))) THEN
+             POS2(3)=POS2(3)-DDIST12*TANVEC(3)
+          ENDIF
+
+          ! if only one atoms (atom1) is allowed to move, then move that atom along the direction_vec so that
+          ! |pos_a - pos_b| = DIST12 along direction_vec
+          IF ((T_INFO%LSFOR(1,ION1(I))).AND.(.NOT.T_INFO%LSFOR(1,ION2(I)))) THEN
+             POS1(1)=POS1(1)+DDIST12*TANVEC(1)
+          ENDIF
+          IF ((T_INFO%LSFOR(2,ION1(I))).AND.(.NOT.T_INFO%LSFOR(2,ION2(I)))) THEN
+             POS1(2)=POS1(2)+DDIST12*TANVEC(2)
+          ENDIF
+          IF ((T_INFO%LSFOR(3,ION1(I))).AND.(.NOT.T_INFO%LSFOR(3,ION2(I)))) THEN
+             POS1(3)=POS1(3)+DDIST12*TANVEC(3)
+          ENDIF
+
+          CALL KARDIR(1,POS1,LATT_CUR%B)
+          CALL KARDIR(1,POS2,LATT_CUR%B)
+
+          POS(1,ION1(I))=POS1(1)
+          POS(2,ION1(I))=POS1(2)
+          POS(3,ION1(I))=POS1(3)
+          POS(1,ION2(I))=POS2(1)
+          POS(2,ION2(I))=POS2(2)
+          POS(3,ION2(I))=POS2(3)
+      END DO
+      IF (IO%IU0>=0) WRITE(IO%IU0,'(X,A)') 'CONSTRAIN_POSITION is done.'
+
+
+ 700  CONTINUE
+      END SUBROUTINE
+
diff -bruN src/main.F ../vasp.5.4.4_mod/src/main.F
--- src/main.F	2017-04-20 10:03:58.000000000 +0100
+++ ../vasp.5.4.4_mod/src/main.F	2020-06-16 19:44:44.688094172 +0100
@@ -3125,6 +3125,8 @@
 ! add chain forces and constrain forces
 !=======================================================================
       CALL VCA_FORCE(T_INFO, TIFOR)
+! 2018-05-22 CCX: added for fixing bond length
+      CALL CONSTRAIN_FORCE(T_INFO,DYN%VEL,TIFOR,DYN%POSION,LATT_CUR,IO)
 
       IF (DYN%IBRION /=5 .AND. DYN%IBRION /=6  .AND. DYN%IBRION /=7 ) &
       CALL SET_SELECTED_FORCES_ZERO(T_INFO,DYN%VEL,TIFOR,LATT_CUR)
@@ -3677,6 +3679,10 @@
            ENDDO
         ENDIF
         CALL LATTIC(LATT_CUR)
+
+! 2020-04-28 CCX: position constrain for fixing bond length
+        CALL CONSTRAIN_POSITION(T_INFO,DYN%POSION,LATT_CUR,IO)
+
 !-----------------------------------------------------------------------
 !  reinitialize the prediction algorithm for the wavefunction if needed
 !-----------------------------------------------------------------------
diff -bruN src/.objects ../vasp.5.4.4_mod/src/.objects
--- src/.objects	2017-04-20 10:04:05.000000000 +0100
+++ ../vasp.5.4.4_mod/src/.objects	2020-06-16 18:25:58.156853177 +0100
@@ -129,6 +129,7 @@
 	pardens.o \
 	optics.o \
 	constr_cell_relax.o \
+        constrain.o \
 	stm.o \
 	finite_diff.o \
 	elpol.o \
@@ -327,6 +328,7 @@
 	pardens.o \
 	optics.o \
 	constr_cell_relax.o \
+        constrain.o \
 	stm.o \
 	finite_diff.o \
 	elpol.o \
